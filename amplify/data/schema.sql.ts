/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from "@aws-amplify/data-schema";
import { configure } from "@aws-amplify/data-schema/internals";
import { secret } from "@aws-amplify/backend";

export const schema = configure({
    database: {
        identifier: "IDhjjFw5u5tg2WdS6StyfOA",
        engine: "postgresql",
        connectionUri: secret("SQL_CONNECTION_STRING"),
        vpcConfig: {
            vpcId: "vpc-0abe2e75f807f46a7",
            securityGroupIds: [
                "sg-08e281f97ece5690d",
                "sg-0e757293ce220a2c1",
                "sg-0f7711106265f98ad"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: "subnet-07b529ae403b17c0d",
                    availabilityZone: "us-east-1d"
                },
                {
                    subnetId: "subnet-0d2b6070544aa98f7",
                    availabilityZone: "us-east-1b"
                },
                {
                    subnetId: "subnet-03b3c96da16ba9358",
                    availabilityZone: "us-east-1a"
                },
                {
                    subnetId: "subnet-0feb77a22b0684145",
                    availabilityZone: "us-east-1c"
                },
                {
                    subnetId: "subnet-0c6e79663452a1183",
                    availabilityZone: "us-east-1f"
                },
                {
                    subnetId: "subnet-0ff92351390d8b82e",
                    availabilityZone: "us-east-1e"
                }
            ]
        }
    }
}).schema({
    "sensor_data_new_tbl": a.model({
        topicsensor: a.string(),
        payloadlength: a.integer(),
        timestamp_mess_rcvd: a.float(),
        gatewayid: a.string(),
        binsize: a.integer(),
        fftsize: a.integer(),
        fftwindow: a.integer(),
        g_range: a.integer(),
        id: a.integer().required(),
        precision: a.integer(),
        trigger: a.integer(),
        valueoffset: a.integer(),
        sensornodeid: a.string(),
        sourceaddress: a.string(),
        temperature: a.float(),
        timestamp: a.integer(),
        type: a.string(),
        vibration_rms: a.integer(),
        application: a.string(),
        meas_type: a.string(),
        system: a.string(),
        equipment_type: a.string(),
        location: a.string(),
        temp_hi_limit: a.integer(),
        temp_lo_limit: a.integer(),
        vib_hi_limit: a.integer(),
        vib_lo_limit: a.string(),
        vib_spike_limit: a.integer(),
        temp_spike_limit: a.integer(),
        esa_group: a.string(),
        paint_shop: a.string(),
        paint_area: a.string(),
        system_type: a.string(),
        node_name: a.string()
    }).identifier([
        "id"
    ])
});
